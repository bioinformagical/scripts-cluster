#!/bin/bash

# Request a run time of 5 hours and 30 minutes
#PBS -l walltime=168:30:00

# Request 1 processor in 1 node
#PBS -l nodes=1:ppn=12

# Request 7600 megabytes memory per processor.  ( 48 usable CPUs)
#PBS -l vmem=88gb

#PBS -N fffastzoomzoomboom-cote

#PBS -t 1-18
umask 007
set -eu

#file=$(sed -n -e "${PBS_ARRAYID}p" /lustre/groups/bioservices/gregory/HSMS_104_Cote/file.txt)
file=$(sed -n -e "${PBS_ARRAYID}p" /lustre/groups/bioservices/gregory/HSMS_104_Cote/file2.txt)
#dir=$(sed -n -e "${PBS_ARRAYID}p" /lustre/groups/lorainelab/data/illumina/sweet_potato/filtered/dir.txt)

echo "Launching fastx"

#cd $home
module load fastx-toolkit

cd /lustre/groups/bioservices/gregory/HSMS_104_Cote/filter/

#Copy the following line as many times as the number of samples you are analyzing, then
#replace "YOURFILE" with the names of your samples e.g. "1_Hot":
#mkdir ${dir}
#cd fastx 
#for i in 2 1;
#do
	#mv ../UNCC_Schlueter_130909HiSeq_Run_Sample_${ssid}_R${i}_001.cutadapt.fastq ./
	echo "Working on ${file}"
 ~/sw/ea-utils-read-only/clipper/fastq-mcf -o ${file}-R1-clip.fq -o ${file}-R2-clip.fq -q 20 -l 20 -P 33 -x 10 -w 4 /lustre/groups/lorainelab/data/illumina/sweet_potato/filtered/concat/adapters.fa ../${file}-R1.fastq ../${file}-R2.fastq &>r.log



#	gunzip ../${file}
#	fastq_quality_trimmer -Q33 -v -t 20 -i ../${file}_R${i}.fastq -o ${file}_R${i}_fastx.fastq
#	fastx_quality_stats -Q33 -i ${file}_R${i}_fastx.fastq -o ${file}_R${i}_qualstats.txt

#done

############  Correct the pairs   ######
perl /lustre/home/rreid2/scripts/filter/PE_FIX_POSTQC.pl --pe1 ${file}-R1-clip.fq --pe2 ${file}-R2-clip.fq



####  Validate Mate pairs   ######
perl ~/scripts/perl/validateHiseqPairs.pl ${file}-R1-clip_matched.fq ${file}-R2-clip_matched.fq







#Adapter clipping:
#Matches to potential adapter sequences at the end of reads, then removes reads shorter than 20 bases. 

#For the next step, copy the line as many times as the number of samples, then 
#add the sequences of your adapters after the -a flag (e.g. -a ATTGGCTTTGGGCAT), as well as changing the sample names:
#The sequences of Illumina's TruSeq adapters are proprietary information, but can be recieved by emailing Illumina customer support at info@illumina.com 
#for i in 1 2;
#do
#      AGTCAA
 #     AGTTCC
  #    ATGTCA
   #   CAGATC
    #  CCGTCC
     # CTTGTA
  #    GCCAAT
  #    GTCCGC

#	fastx_clipper -Q33 -a ATTGGCTTTGGGCAT -a AGTCAA -a CTTGTA -a CAGATC -a GCCAAT -a TGACCA -a ACAGTG -l 40 -n -v -i ${ssid}_R${i}_trimmed.fastq -o ${ssid}_R${i}_trimmed_clipped.fastq
#	fastx_collapser -Q33 -v -i  ${ssid}_trimmed_clipped.fastq -o ${ssid}_collapsed.txt
	#/lustre/home/rreid2/scripts/stan/Scripts for SFG/fastqduplicatecounter.py ${ssid}_collapsed.txt ${ssid}_collapsed_headers.txt >> ${ssid}_R${i}_duplicateCount.txt
#	fastx_quality_stats -i ${ssid}_R${i}_trimmed_clipped.fastq -o ${ssid}_R${i}qualstats.txt
#done




