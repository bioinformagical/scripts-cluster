#!/bin/bash

# Request a run time of 5 hours and 30 minutes
#PBS -l walltime=168:30:00

# Request 1 processor in 1 node
#PBS -l nodes=1:ppn=12

# Request 7600 megabytes memory per processor.  ( 48 usable CPUs)
#PBS -l vmem=88gb

#PBS -N sssecsclean-bb-bac

##PBS -t 1-25
umask 007
set -eu

#file=$(sed -n -e "${PBS_ARRAYID}p" /lustre/groups/p2ep/blueberry/rnaseq/sra-srr118/file.txt)
#dir=$(sed -n -e "${PBS_ARRAYID}p" /lustre/groups/p2ep/blueberry/rnaseq/sra-srr118/dir.txt)

echo "Launching seq clean"
#BLASTDIR="/home/rreid2/sw/blast/blast-2.2.26/bin"
#export BLASTDIR:$PATH
PATH="/home/rreid2/.linuxbrew/bin:/home/rreid2/sw/blast/blast-2.2.26/bin:$PATH"
export PATH

#blastall

#cd $home
#module load fastx-toolkit

cd /lustre/groups/p2ep/blueberry/bac/raw/trimmed/vector/


for file in bvc-f  bvc-r  hvc-f  hvc-r
do
	/lustre/groups/bioservices/hockeypuck/old/seqclean/seqclean ${file}.fna -c 12  -v  /lustre/groups/bioservices/hockeypuck/old//blueberry/db/gSe13andUnivec.fasta -s  /lustre/groups/bioservices/hockeypuck/old/blueberry/db/vitisMito.fasta,  /lustre/groups/bioservices/hockeypuck/old/blueberry/db/vitisViniChloro.fasta  -o ${file}".clean"
done

#Copy the following line as many times as the number of samples you are analyzing, then
#replace "YOURFILE" with the names of your samples e.g. "1_Hot":
#mkdir ${dir}
#cd fastx 
#for i in 2 1;
#do
	#mv ../UNCC_Schlueter_130909HiSeq_Run_Sample_${ssid}_R${i}_001.cutadapt.fastq ./
	echo "${file}"
#	gunzip ../${dir}/${file}.fastq.gz
#	fastq_quality_trimmer -Q33 -v -t 20 -i ../${file}.fastq -o ${file}_fastxqual.fastq
#	fastx_clipper -Q33 -a ATTGGCTTTGGGCAT -a AGTCAA -a CTTGTA -a CAGATC -a GCCAAT -a TGACCA -a ACAGTG -l 40 -n -v -i ${ssid}_R${i}_trimmed.fastq -o ${ssid}_R${i}_trimmed_clipped.fastq
       # fastx_collapser -Q33 -v -i  ${ssid}_trimmed_clipped.fastq -o ${ssid}_collapsed.txt
        #/lustre/home/rreid2/scripts/stan/Scripts for SFG/fastqduplicatecounter.py ${ssid}_collapsed.txt ${ssid}_collapsed_headers.txt >> ${ssid}_R${i}_duplicateCount.txt
 #       fastx_quality_stats -Q33 -i ${file}_fastxqual.fastq -o ${file}_qualstats.txt

#done

####  Validate Mate pairs   ######
#perl ~/scripts/perl/validateHiseqPairs.pl ${ssid}_R1_trimmed_clipped.fastq ${ssid}_R2_trimmed_clipped.fastq







#Adapter clipping:
#Matches to potential adapter sequences at the end of reads, then removes reads shorter than 20 bases. 

#For the next step, copy the line as many times as the number of samples, then 
#add the sequences of your adapters after the -a flag (e.g. -a ATTGGCTTTGGGCAT), as well as changing the sample names:
#The sequences of Illumina's TruSeq adapters are proprietary information, but can be recieved by emailing Illumina customer support at info@illumina.com 
#for i in 1 2;
#do
#      AGTCAA
 #     AGTTCC
  #    ATGTCA
   #   CAGATC
    #  CCGTCC
     # CTTGTA
  #    GCCAAT
  #    GTCCGC

#	fastx_clipper -Q33 -a ATTGGCTTTGGGCAT -a AGTCAA -a CTTGTA -a CAGATC -a GCCAAT -a TGACCA -a ACAGTG -l 40 -n -v -i ${ssid}_R${i}_trimmed.fastq -o ${ssid}_R${i}_trimmed_clipped.fastq
#	fastx_collapser -Q33 -v -i  ${ssid}_trimmed_clipped.fastq -o ${ssid}_collapsed.txt
	#/lustre/home/rreid2/scripts/stan/Scripts for SFG/fastqduplicatecounter.py ${ssid}_collapsed.txt ${ssid}_collapsed_headers.txt >> ${ssid}_R${i}_duplicateCount.txt
#	fastx_quality_stats -i ${ssid}_R${i}_trimmed_clipped.fastq -o ${ssid}_R${i}qualstats.txt
#done




